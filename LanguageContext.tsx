import React, { createContext, useContext, useState, ReactNode } from 'react';

interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
}

interface Translations {
  welcome: string;
  welcomeDescription: string;
  typeMessage: string;
  libraryTimings: string;
  canteenMenu: string;
  hostelInfo: string;
  placements: string;
  events: string;
  attendance: string;
  fees: string;
  campusMap: string;
  chatHistory: string;
}

interface LanguageContextType {
  currentLanguage: string;
  availableLanguages: Language[];
  translations: Translations;
  setLanguage: (language: string) => void;
}

const languages: Language[] = [
  { code: 'en', name: 'English', nativeName: 'English', flag: 'üá∫üá∏' },
  { code: 'hi', name: 'Hindi', nativeName: '‡§π‡§ø‡§Ç‡§¶‡•Ä', flag: 'üáÆüá≥' },
  { code: 'te', name: 'Telugu', nativeName: '‡∞§‡±Ü‡∞≤‡±Å‡∞ó‡±Å', flag: 'üáÆüá≥' },
];

const translationsMap: Record<string, Translations> = {
  en: {
    welcome: "Welcome to Campus Assistant!",
    welcomeDescription: "I'm here to help you with campus queries in your preferred language. Ask me about facilities, events, academics, and more!",
    typeMessage: "Type your message...",
    libraryTimings: "Library Timings",
    canteenMenu: "Canteen Menu",
    hostelInfo: "Hostel Info",
    placements: "Placements",
    events: "Events",
    attendance: "My Attendance",
    fees: "Fees & Scholarships",
    campusMap: "Campus Map",
    chatHistory: "Chat History"
  },
  hi: {
    welcome: "‡§ï‡•à‡§Ç‡§™‡§∏ ‡§Ö‡§∏‡§ø‡§∏‡•ç‡§ü‡•á‡§Ç‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!",
    welcomeDescription: "‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§Ç‡§™‡§∏ ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á ‡§∏‡§µ‡§æ‡§≤‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§∏‡•Å‡§µ‡§ø‡§ß‡§æ‡§ì‡§Ç, ‡§ò‡§ü‡§®‡§æ‡§ì‡§Ç, ‡§∂‡§ø‡§ï‡•ç‡§∑‡§æ‡§µ‡§ø‡§¶‡•ã‡§Ç ‡§î‡§∞ ‡§Ö‡§®‡•ç‡§Ø ‡§ö‡•Ä‡§ú‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç!",
    typeMessage: "‡§Ö‡§™‡§®‡§æ ‡§∏‡§Ç‡§¶‡•á‡§∂ ‡§≤‡§ø‡§ñ‡•á‡§Ç...",
    libraryTimings: "‡§≤‡§æ‡§á‡§¨‡•ç‡§∞‡•á‡§∞‡•Ä ‡§ï‡§æ ‡§∏‡§Æ‡§Ø",
    canteenMenu: "‡§ï‡•à‡§Ç‡§ü‡•Ä‡§® ‡§Æ‡•á‡§®‡•ç‡§Ø‡•Ç",
    hostelInfo: "‡§π‡•â‡§∏‡•ç‡§ü‡§≤ ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä",
    placements: "‡§™‡•ç‡§≤‡•á‡§∏‡§Æ‡•á‡§Ç‡§ü‡•ç‡§∏",
    events: "‡§á‡§µ‡•á‡§Ç‡§ü‡•ç‡§∏",
    attendance: "‡§Æ‡•á‡§∞‡•Ä ‡§â‡§™‡§∏‡•ç‡§•‡§ø‡§§‡§ø",
    fees: "‡§´‡•Ä‡§∏ ‡§î‡§∞ ‡§õ‡§æ‡§§‡•ç‡§∞‡§µ‡•É‡§§‡•ç‡§§‡§ø",
    campusMap: "‡§ï‡•à‡§Ç‡§™‡§∏ ‡§Æ‡•à‡§™",
    chatHistory: "‡§ö‡•à‡§ü ‡§π‡§ø‡§∏‡•ç‡§ü‡§∞‡•Ä"
  },
  te: {
    welcome: "‡∞ï‡±ç‡∞Ø‡∞æ‡∞Ç‡∞™‡∞∏‡±ç ‡∞Ö‡∞∏‡∞ø‡∞∏‡±ç‡∞ü‡±Ü‡∞Ç‡∞ü‡±ç‚Äå‡∞ï‡∞ø ‡∞∏‡±ç‡∞µ‡∞æ‡∞ó‡∞§‡∞Ç!",
    welcomeDescription: "‡∞Æ‡±Ä‡∞ï‡±Å ‡∞á‡∞∑‡±ç‡∞ü‡∞Æ‡±à‡∞® ‡∞≠‡∞æ‡∞∑‡∞≤‡±ã ‡∞ï‡±ç‡∞Ø‡∞æ‡∞Ç‡∞™‡∞∏‡±ç ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞≤‡∞§‡±ã ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞®‡±á‡∞®‡±Å ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞∏‡±å‡∞ï‡∞∞‡±ç‡∞Ø‡∞æ‡∞≤‡±Å, ‡∞à‡∞µ‡±Ü‡∞Ç‡∞ü‡±ç‡∞∏‡±ç, ‡∞Ö‡∞ï‡∞æ‡∞°‡∞Æ‡∞ø‡∞ï‡±ç‡∞∏‡±ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø‡∞Ç‡∞ü‡∞ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø!",
    typeMessage: "‡∞Æ‡±Ä ‡∞∏‡∞Ç‡∞¶‡±á‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞ü‡±à‡∞™‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø...",
    libraryTimings: "‡∞≤‡±à‡∞¨‡±ç‡∞∞‡∞∞‡±Ä ‡∞∏‡∞Æ‡∞Ø‡∞æ‡∞≤‡±Å",
    canteenMenu: "‡∞ï‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ü‡±Ä‡∞®‡±ç ‡∞Æ‡±Ü‡∞®‡±Ç",
    hostelInfo: "‡∞π‡∞æ‡∞∏‡±ç‡∞ü‡∞≤‡±ç ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å",
    placements: "‡∞™‡±ç‡∞≤‡±á‡∞∏‡±ç‚Äå‡∞Æ‡±Ü‡∞Ç‡∞ü‡±ç‡∞∏‡±ç",
    events: "‡∞à‡∞µ‡±Ü‡∞Ç‡∞ü‡±ç‡∞∏‡±ç",
    attendance: "‡∞®‡∞æ ‡∞π‡∞æ‡∞ú‡∞∞‡±Å",
    fees: "‡∞´‡±Ä‡∞ú‡±Å‡∞≤‡±Å & ‡∞∏‡±ç‡∞ï‡∞æ‡∞≤‡∞∞‡±ç‚Äå‡∞∑‡∞ø‡∞™‡±ç‡∞∏‡±ç",
    campusMap: "‡∞ï‡±ç‡∞Ø‡∞æ‡∞Ç‡∞™‡∞∏‡±ç ‡∞Æ‡±ç‡∞Ø‡∞æ‡∞™‡±ç",
    chatHistory: "‡∞ö‡∞æ‡∞ü‡±ç ‡∞ö‡∞∞‡∞ø‡∞§‡±ç‡∞∞"
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export function LanguageProvider({ children }: { children: ReactNode }) {
  const [currentLanguage, setCurrentLanguage] = useState('en');

  const setLanguage = (language: string) => {
    setCurrentLanguage(language);
  };

  const value = {
    currentLanguage,
    availableLanguages: languages,
    translations: translationsMap[currentLanguage],
    setLanguage
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
}

export function useLanguage() {
  const context = useContext(LanguageContext);
  if (context === undefined) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
}